generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                       @id @default(autoincrement())
  email            String                    @unique
  passwordHash     String
  role             String
  refreshToken     String?
  createdAt        DateTime                  @default(now())
  profile          Profile?
  reviews          Review[]
  requestTrainings PersonalTrainingRequest[] @relation("Requester")
  conductTrainings PersonalTrainingRequest[] @relation("Conductor")
  notifications    Notification[]
  workouts         Workout[]
  orders           Order[]
  friendBy         User[]                    @relation("UserFriends")
  friends          User[]                    @relation("UserFriends")

  @@map("users")
}

model Profile {
  id                         Int       @id @default(autoincrement())
  userId                     Int       @unique
  user                       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                       String
  avatar                     String
  gender                     String
  birthDay                   DateTime?
  location                   String
  trainingLevel              String
  trainingType               String[]
  trainingTime               String?
  caloriesAmountToLose       Int?
  caloriesAmountToLosePerDay Int?
  isReadyToTraining          Boolean?
  certificate                String?
  resume                     String?
  isReadyToPersonalTraining  Boolean?

  @@map("profiles")
}

model Workout {
  id                   Int      @id @default(autoincrement())
  title                String
  backgroundImage      String
  customerLevel        String
  trainingType         String
  trainingTime         String
  price                Int
  caloriesAmountToLose Int
  description          String
  favorGender          String
  video                String
  rating               Int
  trainerId            Int
  trainer              User     @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  isSpecial            Boolean
  reviews              Review[]
  createdAt            DateTime @default(now())
  orders               Order[]

  @@map("workouts")
}

model SportGym {
  id              Int      @id @default(autoincrement())
  title           String
  location        String
  isVerified      Boolean
  parameters      String[]
  photos          String[]
  description     String
  oneWorkoutPrice Int
  createdAt       DateTime @default(now())
  orders          Order[]

  @@map("sport_gyms")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId Int
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  rating    Int
  text      String
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Order {
  id            Int       @id @default(autoincrement())
  orderType     String
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId     Int?
  workout       Workout?  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sportGymId    Int?
  sportGym      SportGym? @relation(fields: [sportGymId], references: [id], onDelete: Cascade)
  price         Int
  amount        Int
  totalCost     Int
  paymentMethod String
  createdAt     DateTime  @default(now())

  @@map("orders")
}

model PersonalTrainingRequest {
  id          Int      @id @default(autoincrement())
  requesterId Int
  requester   User     @relation("Requester", fields: [requesterId], references: [id])
  conductorId Int
  conductor   User     @relation("Conductor", fields: [conductorId], references: [id])
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("personal_training_requests")
}

model Notification {
  id       Int      @id @default(autoincrement())
  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifyAt DateTime
  text     String

  @@map("notificatons")
}
